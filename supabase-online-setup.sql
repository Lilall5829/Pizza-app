-- FoodOrdering 应用数据库结构部署脚本
-- 用于 Supabase 线上项目部署

-- 创建用户注册触发器函数
CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

-- 创建产品表
CREATE TABLE IF NOT EXISTS "public"."products" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "name" text NOT NULL,
    "image" text,
    "price" real NOT NULL
);

COMMENT ON TABLE "public"."products" IS 'Product details';

-- 创建用户档案表
CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" uuid NOT NULL,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text,
    "group" text DEFAULT 'USER' NOT NULL,
    CONSTRAINT "username_length" CHECK (char_length("username") >= 3)
);

-- 创建订单表
CREATE TABLE IF NOT EXISTS "public"."orders" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "status" text DEFAULT 'New' NOT NULL,
    "total" double precision DEFAULT 0 NOT NULL,
    "user_id" uuid
);

-- 创建订单项目表
CREATE TABLE IF NOT EXISTS "public"."order_items" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "product_id" bigint NOT NULL,
    "size" text DEFAULT 'M' NOT NULL,
    "quantity" integer DEFAULT 1 NOT NULL,
    "order_id" bigint NOT NULL
);

-- 设置主键约束
ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "orders_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "order_items_pkey" PRIMARY KEY ("id");

-- 设置外键约束
ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."orders"
    ADD CONSTRAINT "public_orders_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "public_order_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."order_items"
    ADD CONSTRAINT "public_order_items_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON UPDATE CASCADE ON DELETE CASCADE;

-- 启用行级安全策略 (RLS)
ALTER TABLE "public"."products" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."orders" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."order_items" ENABLE ROW LEVEL SECURITY;

-- 创建安全策略
-- 产品表：认证用户可以进行所有操作
CREATE POLICY "Allow authenticated users ALL operations" ON "public"."products" 
    FOR ALL TO "authenticated" USING (true) WITH CHECK (true);

-- 用户档案表策略
CREATE POLICY "Public profiles are viewable by everyone" ON "public"."profiles" 
    FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile" ON "public"."profiles" 
    FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON "public"."profiles" 
    FOR UPDATE USING (auth.uid() = id);

-- 订单表：认证用户可以进行所有操作
CREATE POLICY "All operations to authenticated users" ON "public"."orders" 
    FOR ALL TO "authenticated" USING (true);

-- 订单项目表：认证用户可以进行所有操作
CREATE POLICY "All operations to authenticated users" ON "public"."order_items" 
    FOR ALL TO "authenticated" USING (true);

-- 创建用户注册触发器
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 启用实时订阅
ALTER PUBLICATION supabase_realtime ADD TABLE "public"."orders";

-- 插入示例产品数据
INSERT INTO "public"."products" ("name", "image", "price") VALUES 
('Margherita Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/default.png', 12.99),
('Pepperoni Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/peperoni.png', 15.99),
('Hawaiian Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/hawaiian.png', 16.99),
('Veggie Supreme', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/veggie.png', 14.99),
('BBQ Chicken Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/default.png', 17.99),
('Supreme Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/default.png', 19.99),
('Meat Lovers', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/default.png', 21.99),
('Cheese Pizza', 'https://notjustdev-dummy.s3.us-east-2.amazonaws.com/food/default.png', 11.99)
ON CONFLICT DO NOTHING; 